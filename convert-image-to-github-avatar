#!/usr/bin/env python3
"""
Yet another script of mine.

Usage: {script} [options] INPUT OUTPUT

Arguments:
    INPUT - Path to the pixel art image.
    OUTPUT - Path for image generation.

Options:
    -t --transparency transparency
        Background transparency from 0 to 255.
    -h, --help
        Show this screen and exit.
"""
import sys
from contextlib import suppress
from pathlib import Path


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    image = Path(args["INPUT"])
    transparency = int(args["--transparency"]) if args["--transparency"] is not None else 255

    from PIL import Image

    image = Image.open(image).convert("RGBA")
    w, h = image.size
    pixelsize = 70
    image_pixels = image.getdata()

    def get_pixel_color(x, y):
        x = (x - pixelsize // 2) // pixelsize
        y = (y - pixelsize // 2) // pixelsize
        if 0 <= x < w and 0 <= y < h:
            return image_pixels[y * w + x]
        return [240, 240, 240, 255 - transparency]

    def get_pixel_color_overlapping(x, y):
        return max(
            get_pixel_color(x, y),
            get_pixel_color(x - 1, y),
            get_pixel_color(x, y - 1),
            get_pixel_color(x - 1, y - 1),
            key=lambda color: (3 * 255 - sum(color[0:3])) * color[3],
        )

    Image.frombytes(
        "RGBA",
        ((w + 1) * pixelsize, (h + 1) * pixelsize),
        b"".join(
            map(
                bytes,
                (
                    get_pixel_color_overlapping(x, y)
                    for y in range((h + 1) * pixelsize)
                    for x in range((w + 1) * pixelsize)
                ),
            )
        ),
    ).save(Path(args["OUTPUT"]))


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
