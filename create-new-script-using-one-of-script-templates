#!/usr/bin/env python3
"""
Create new script using one of script templates.

Usage: {script} [options] PATH

Arguments:
    PATH - Desired path for new script.

Options:
    -h, --help
        Show this screen and exit.

    --verbose
        Raise verbosity level.
"""
import os
import sys
from contextlib import suppress
from pathlib import Path
from random import randint
from subprocess import run

SCRIPT_LUA = (
    "local fs = {}\n"
    "\n"
    "local function main()\n"
    '\tlocal template_dir = vim.fn.expand("$GIT_PROJECTS_DIR/small_scripts/script-templates/")\n'
    '\tlocal pickers = require "telescope.pickers"\n'
    '\tlocal finders = require "telescope.finders"\n'
    '\tlocal conf = require("telescope.config").values\n'
    '\tlocal actions = require "telescope.actions"\n'
    '\tlocal action_state = require "telescope.actions.state"\n'
    '\t-- local make_entry = require "telescope.make_entry"\n'
    '\tlocal find_command = { "find", template_dir, "-type", "f" }\n'
    "\tlocal opts = {\n"
    "\t\t-- entry_maker = make_entry.gen_from_file {}\n"
    "\t\tentry_maker = function(path)\n"
    "\t\t\tlocal basename = fs.get_path_basename(path)\n"
    '\t\t\tlocal name = basename:gsub("_|-", " "):gsub("%..*$", "")\n'
    "\t\t\tlocal ordinal = name\n"
    '\t\t\tif string.sub(basename, -3) == ".py" then\n'
    '\t\t\t\tordinal = "[python] " .. name\n'
    "\t\t\tend\n"
    "\t\t\treturn {\n"
    "\t\t\t\tvalue = path,\n"
    "\t\t\t\tdisplay = name,\n"
    "\t\t\t\tordinal = ordinal,\n"
    "\t\t\t}\n"
    "\t\tend\n"
    "\t}\n"
    '\tlocal description = os.getenv("SCRIPT_DESCRIPTION")\n'
    '\tif description and description:find("^Convert .* to .*") then\n'
    '\t\topts.default_text = "convert "\n'
    "\tend\n"
    "\tpickers.new(opts, {\n"
    '\t\tprompt_title = "Choose template",\n'
    "\t\tfinder = finders.new_oneshot_job(find_command, opts),\n"
    "\t\tpreviewer = conf.file_previewer(opts),\n"
    "\t\tsorter = conf.file_sorter(opts),\n"
    "\t\tattach_mappings = function(prompt_bufnr, map)\n"
    "\t\t\tactions.select_default:replace(function()\n"
    "\t\t\t\tactions.close(prompt_bufnr)\n"
    "\t\t\t\tlocal selection = action_state.get_selected_entry()\n"
    "\t\t\t\tif not selection then return end\n"
    "\t\t\t\tfs.load_template(selection.value)\n"
    "\t\t\tend)\n"
    "\t\t\treturn true\n"
    "\t\tend,\n"
    "\t}):find()\n"
    "end\n"
    "\n"
    "fs.load_template = function(path)\n"
    "\tlocal lines = {}\n"
    '\tlocal description = os.getenv("SCRIPT_DESCRIPTION")\n'
    "\tfor line in io.lines(path) do\n"
    '\t\tlines[#lines + 1] = line:gsub("SCRIPT_DESCRIPTION", description)\n'
    "\tend\n"
    "\tvim.api.nvim_buf_set_lines(0, 0, -1, true, lines)\n"
    '\tvim.fn.search("def ")\n'
    '\tvim.cmd.normal "jlllll"\n'
    '\tvim.cmd "redraw | w | e"\n'
    "end\n"
    "\n"
    "fs.get_path_basename = function(path)\n"
    '\treturn path:sub(path:find("/[^/]*$") + 1)\n'
    "end\n"
    "\n"
    "main()\n"
)


def create_script(path: Path, description: str = "Yet another script of mine."):
    debug(f"script-path: {path}")
    path.write_text("")
    path.chmod(path.stat().st_mode | 0o100)
    tmp_id = randint(0, 10**128 - 1) * (1 + abs(hash(None))) % 10**128
    lua_script = path.parent / f".tmp{tmp_id}.lua"
    lua_script.write_text(SCRIPT_LUA)
    cmd = ["nvim", "-S", lua_script, "--", str(path)]
    run(cmd, check=False, env={"SCRIPT_DESCRIPTION": description, **os.environ})
    with suppress(FileNotFoundError):
        os.remove(lua_script)


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    setattr(debug, "enabled", args["--verbose"])
    debug(f"Running with arguments {dict(args)!r}")
    name = str(args["PATH"])
    if name.startswith("convert-") and "-to-" in name:
        source, target = name.removeprefix("convert-").split("-to-", 1)
        description = f"Convert {source} file to {target} file"
        create_script(Path(name), description=description)
    else:
        create_script(Path(name))


def debug(*objects: object, sep: str = " "):
    if getattr(debug, "enabled", False):
        print(sep.join(map(str, objects)))


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
