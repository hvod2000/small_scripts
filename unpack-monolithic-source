#!/usr/bin/env python3
"""
Convert monolithic source to directory.

Usage: {script} [options] PATH

Arguments:
    PATH - Path to the monolithic source to be unpackaged.

Options:
    -h, --help
        Show this screen and exit.

    --verbose
        Raise verbosity level.
"""
import os
import sys
import ast
from contextlib import suppress
from pathlib import Path


def unpack(monolith_path: Path):
    dir_path = Path(str(monolith_path.resolve()) + ".d")
    if dir_path.exists():
        raise Exception(f"{dir_path} already exists")
    dir_path.mkdir()
    lines = []
    lines_iter = iter(list(monolith_path.read_text().removesuffix("\n").split("\n")))
    for line in lines_iter:
        lines.append(line)
        if not line.strip() or line.startswith("#") or line.startswith("import ") or line.startswith("from "):
            continue
        if line == '"""' or line == "'''":
            for next_line in lines_iter:
                lines.append(next_line)
                if next_line == line:
                    break
            continue
        if not line.endswith(" = ("):
            lines.extend(lines_iter)
            break
        variable = line.removesuffix(" = (")
        inlined_text = []
        for line in lines_iter:
            lines.append(line)
            if line == ")":
                break
            try:
                text = ast.literal_eval(line)
                assert isinstance(text, str)
                inlined_text.append(text)
            except (SyntaxError, AssertionError):
                inlined_text = None
                break
        if inlined_text is None:
            break
        name, extension = variable.lower().rsplit("_", 1)
        name = name.replace("_", "-")
        debug(f"Separating {variable} into {name}.{extension}")
        source_path = ".d/" + name + "." + extension
        lines[-len(inlined_text) - 2:] = [f"{variable} = Path(__file__ + {source_path!r}).read_text()"]
        Path(str(monolith_path) + source_path).write_text("".join(inlined_text))
    lines.extend(lines_iter)
    monolith_path.write_text("".join(line + "\n" for line in lines))


def main(script_name: str, *script_args: str):
    doc = __doc__.format(script=Path(script_name).name)
    args = __import__("docopt").docopt(doc, script_args)
    setattr(debug, "enabled", args["--verbose"])
    debug(f"Running with arguments {dict(args)!r}")
    unpack(Path(args["PATH"]))


def debug(*objects: object, sep: str = " "):
    if getattr(debug, "enabled", False):
        print(sep.join(map(str, objects)))


if __name__ == "__main__":
    with suppress(KeyboardInterrupt):
        main(sys.argv[0], *sys.argv[1:])
